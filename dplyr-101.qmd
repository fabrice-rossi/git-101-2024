---
title: "Dplyr 101"
author: "Fabrice Rossi"
format: 
  html:
    code-fold: true
---

```{r}
#| message: false
here::i_am("git-101-2024.Rproj")
library(here)
library(vroom)
library(ggplot2)
theme_set(theme_bw())
```

## Data import

```{r}
#| message: false
white_wine <- vroom(here("data", "winequality-white.csv"))
```

|                        |                      |
|------------------------|----------------------|
| Number of observations | `r NROW(white_wine)` |
| Number of variables    | `r NCOL(white_wine)` |

```{r}
ggplot(white_wine, aes(x = quality)) +
  geom_bar()
```

## Data transformation
```{r}
#| message: false
library(dplyr)
```

### Column extraction 
```{r}
class(white_wine)
## class + column extraction
class(white_wine$quality)
## column extraction and then class
white_wine$quality |> class()
white_wine[["quality"]] |> class()
white_wine$`fixed acidity` |> class()
white_wine[["fixed acidity"]] |> class()
## dplyr style
white_wine |>
  pull(quality) |>
  class()
class(pull(white_wine, quality))
```

With `dplyr`, `pull()` is the column extraction function, somewhat similar to the
dollar `$` operator and to the double bracket `[[]]`. 


### Column recoding
This ggplot call gives a warning because `quality` is numeric which is not
supported for bar filling in `geom_bar()`.

```{r}
#| eval: false
#| code-fold: false
ggplot(white_wine, aes(x = quality, fill = quality)) +
  geom_bar()
```


```{r}
#| eval: false
white_wine$quality <- factor(white_wine$quality,
  ordered = TRUE,
  levels = 3:9
) ## 3:9 means 3, 4, 5, ..., 9
white_wine$quality <- white_wine$quality |> factor(
  ordered = TRUE,
  levels = 3:9
) ## 3:9 means 3, 4, 5, ..., 9
```

```{r}
white_wine <- white_wine |>
  mutate(quality = factor(quality, ordered = TRUE, levels = 3:9))
```

```{r}
ggplot(white_wine, aes(x = quality, fill = quality)) +
  geom_bar()
```

### Computing new columns
This is again a task for `mutate()`.

```{r}
white_wine <- white_wine |>
  mutate(
    `captured sulfur dioxide` = `total sulfur dioxide` - `free sulfur dioxide`,
    `free sd %` = round(`free sulfur dioxide` / `total sulfur dioxide` * 100, 2)
  )
```

## Sub-setting
### Selecting columns
Column sub-setting is done with the `select()` function.

```{r}
white_wine |>
  select(`fixed acidity`, `volatile acidity`, `citric acid`, pH)
```

Side note: we can display nicely data frames with the `knitr::kable()` function
but the original data frame is too big, so we select the first 10 rows with
`slice()`. 

```{r}
#| message: false
white_wine |>
  select(`fixed acidity`, `volatile acidity`, `citric acid`, pH) |>
  slice(1:10) |>
  knitr::kable()
```
Positional selection based on the indices of the columns.

```{r}
#| eval: false
white_wine |>
  select(1:3)
```

Columns can also be selected based on conditions on their names or on their
nature. 

```{r}
#| eval: false
white_wine |>
  select(contains("acid") | pH)
```

Selection based on the content.

```{r}
#| eval: false
white_wine |>
  select(where(is.factor))
```

```{r}
#| eval: false
white_wine |>
  select(where(\(x) is.numeric(x) & (max(x) < 5)))
```

### Selecting rows

Simple selection is based on indices with `slice()`. 

```{r}
white_wine |>
  slice(1:5, 150:155) |>
  select(alcohol, quality) |>
  knitr::kable()
```

Condition based selection uses `filter()`.

```{r}
white_wine |>
  filter(alcohol > 14) |>
  select(alcohol, quality, `citric acid`, `residual sugar`) |>
  knitr::kable()
```
### Simple application
```{r}
ggplot(white_wine, aes(x = alcohol)) +
  geom_density(bw = "sj") +
  geom_rug(alpha = 0.1)
```
```{r}
white_wine |>
  filter(alcohol >= 13, `citric acid` < 1) |>
  ggplot(aes(x = `citric acid`, y = `residual sugar`, color = alcohol)) +
  geom_point(alpha = 0.75) +
  scale_color_viridis_c()
```

```{r}
white_wine |>
  filter(alcohol <= 9) |>
  ggplot(aes(x = `citric acid`, y = `residual sugar`, color = alcohol)) +
  geom_point(alpha = 0.75) +
  scale_color_viridis_c()
```
```{r}
white_wine |>
  mutate(`alcohol category` = case_when(alcohol <= 9 ~ "low",
    alcohol >= 13 ~ "high",
    .default = "medium"
  )) |>
  filter(`alcohol category` != "medium") |>
  filter(`citric acid` <= 1) |>
  ggplot(aes(x = `citric acid`, y = `residual sugar`, color = alcohol)) +
  geom_point(alpha = 0.75) +
  scale_color_viridis_c() +
  facet_wrap(vars(`alcohol category`))
```

## Aggregation functions
A.k.a. summary functions: turn a possibly long vector into a single
value (still a vector!).

- standard statistics: `max()`, `min()`, `median()`, etc. 
- logical operations: `any()` and `all()`
- counts and ranks: `n()`

### Simple summary use
Based on the `summarise()` function or inside a `mutate()` call. 

```{r}
white_wine |>
  summarise(
    med_alcohol = median(alcohol),
    sd(alcohol)
  )
```

```{r}
white_wine |>
  select(alcohol) |>
  mutate(m_a = median(alcohol))
```

```{r}
white_wine |>
  select(alcohol) |>
  mutate(
    a_m_median = alcohol - median(alcohol),
    .keep = "none"
  )
```

```{r}
white_wine |>
  select(alcohol) |>
  mutate(
    na = (alcohol - mean(alcohol)) / sd(alcohol),
    na_r = (alcohol - median(alcohol)) / IQR(alcohol),
    .keep = "none"
  )
```

```{r}
white_wine |>
  summarise(
    mean(alcohol),
    sd(alcohol),
    median(alcohol),
    IQR(alcohol)
  )
```

### More complex summary functions
Essentially `quantile()`.

```{r}
quantile(white_wine$`residual sugar`)
```

```{r}
quantile(white_wine$`residual sugar`, probs = seq(0, 1, 0.1))
```

```{r}
mean(white_wine$`residual sugar`)
```

```{r}
white_wine |>
  summarise(quantile(`residual sugar`))
```

```{r}
white_wine |>
  reframe(
    quantile(`residual sugar`),
    mean(`residual sugar`)
  )
```

```{r}
sugar_stats <- white_wine |>
  summarise(
    list(quantile(`residual sugar`)),
    mean(`residual sugar`)
  )
```

### Group by
#### Introduction
```{r}
white_wine |>
  summarise(median(`residual sugar`),
    n(),
    .by = quality
  ) |>
  arrange(quality)
```
#### Quantizing continuous variables

```{r}
white_wine |>
  summarise(median(`residual sugar`),
    n(),
    .by = alcohol
  ) |>
  arrange(alcohol)
```

```{r}
white_wine |>
  mutate(ha = alcohol >= 12.5) |>
  summarise(median(`residual sugar`),
    n(),
    .by = ha
  )
```

```{r}
white_wine |>
  mutate(alcohol_class = cut(alcohol,
    breaks = c(7, 9, 10, 12, 13, 15),
    ordered_result = TRUE
  )) |>
  summarise(median(`residual sugar`),
    n(),
    .by = alcohol_class
  )
```

```{r}
white_wine |>
  mutate(alcohol_class = cut(alcohol,
    breaks = c(7, 9, 10, 12, 13, 15),
    ordered_result = TRUE
  )) |>
  ggplot(aes(x = alcohol_class)) +
  geom_bar()
```

```{r}
ggplot(white_wine, aes(x = alcohol, y = quality)) +
  geom_boxplot()
```
```{r}
white_wine |>
  mutate(alcohol_class = cut(alcohol,
    breaks = c(7, 9, 10, 12, 13, 15),
    ordered_result = TRUE
  )) |>
  ggplot(aes(x = alcohol_class, fill = quality)) +
  geom_bar(position = "fill")
```
```{r}
alcohol_quantiles <-
  white_wine |>
  pull(alcohol) |>
  quantile(probs = seq(0, 1, by = 0.1))
alcohol_quantiles
```
```{r}
alcohol_quantiles[1] <- alcohol_quantiles[1] - 1
alcohol_quantiles
```

```{r}
white_wine |>
  mutate(alcohol_class = cut(alcohol,
    breaks = alcohol_quantiles,
    ordered_result = TRUE
  )) |>
  ggplot(aes(x = alcohol_class)) +
  geom_bar()
```
```{r}
white_wine |>
  mutate(alcohol_class = cut(alcohol,
    breaks = alcohol_quantiles,
    ordered_result = TRUE
  )) |>
  ggplot(aes(x = alcohol_class, fill = quality)) +
  geom_bar(position = "fill")
```
#### Functions with a .by parameter
Some dplyr verbs support the `.by` parameter: 

- `summarise()`
- `reframe()`
- `mutate()`
- `slice_*()`
- `filter()`

```{r}
white_wine |>
  select(1:2) |> ## first 2 columns
  slice(1:5) ## first 5 rows
```

```{r}
white_wine |>
  slice(1:5, .by = quality) |> ## first 5 rows
  select(1:2 | quality) ## first 2 columns (and quality)
```

```{r}
white_wine |>
  slice_sample(n = 1)
```

```{r}
white_wine |>
  slice_sample(n = 1, by = quality) |>
  select(1:2 | quality)
```
```{r}
white_wine |>
  slice_max(alcohol, by = quality) |>
  select(alcohol | quality)
```
```{r}
white_wine |>
  mutate(avg_alcohol_quality = mean(alcohol), .by = quality)
```
